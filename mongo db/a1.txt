db.createCollection("movies")

db.movies.insertMany([ { "title" : "Inglorious Basterds", "writer" : "Quentin Tarantino", "year" : 2009, "actors" : [ "Brad Pitt", "Diane Kruger", "Eli Roth"] }, { "title" : "The Hobbit: An Unexpected Journey", "writer" : "J.R.R. Tolkein", "year" : 2012, "franchise" : "The Hobbit" }, { "title" : "The Hobbit: The Desolation of Smaug", "writer" : "J.R.R. Tolkein", "year" : 2013, "franchise" : "The Hobbit" }, { "title" : "The Hobbit: The Battle of the Five Armies", "writer" : "J.R.R. Tolkein", "year" : 2012, "franchise" : "The Hobbit", "synopsis" : "Bilbo and Company are forced to engage in a war against an array of combatants and keep the Lonely Mountain from falling into the hands of a rising darkness." }, { "title" :" Pee Wee Herman's Big Adventure" }, { "title" : "Avatar" },{"title" :" Pulp Fiction","writer ": "Quentin Tarantino","year" : 1994,"actors" : [" John Travolta", "Uma Thurman"]} ]) 


Query / Find Documents

db.movies.find()

db.movies.find({"writer": "Quentin Tarantino"})

db.movies.find({"actors" : "Brad Pitt"})

db.movies.find({"franchise":"The Hobbit"})

db.movies.find( {year: { $gt: 1990 },{$lt:2000} } )

db.movies.find( {year: { $gt: 2000 },{$lt:2010} } )

db.movies.find({$or:[{year:{$gt:"2010"}},{year: {$lt:"2000"}}]})

Update Documents

db.movies.update({_id:ObjectId("60028ff0edabbb394a34e82a")}, {$set:{synopsis:"A reluctant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon Smaug."}})

db.movies.update({_id:ObjectId("60005320ca2cfb0df3b120f8")}, {$set:{synopsis:"The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a mysterious and magical ring."}})

db.movies.update({_id:ObjectId("60030774edabbb394a34e82b")}, {$push:{actors:"Samuel L. Jackson"}})

Text Search

db.movies.find({synopsis:{$regex:"Bilbo"}})

db.movies.find({synopsis:{$regex:"Gandalf"}})

db.movies.find({$and:[{synopsis:{$regex:"Bilbo"}}, {synopsis:{$not:/Gandalf/}}]})

db.movies.find({$or:[{synopsis:{$regex:"dwarves"}}, {synopsis:{$regex:"hobbit"}}]})

db.movies.find({$and:[{synopsis:{$regex:"gold"}}, {synopsis:{$regex:"dragon"}}]})

Delete Documents

db.movies.deleteOne( { "title" :" Pee Wee Herman's Big Adventure" })

db.movies.deleteOne( { "title" :"Avatar" })

Relationships

db.users.insert({username:"GoodGuyGreg", first_name:"Good Guy", last_name:"Greg"})

db.users.insert({username:"ScumbagSteve", full_name:{first : "Scumbag", last : "Steve"}})

db.posts.insert({username:"GoodGuyGreg",title : "Passes out at party", body :"Wakes up early and cleans house"})

db.posts.insert({username:"GoodGuyGreg",title : ": Steals your identity", body :"Raises your credit score"})

db.posts.insert({username:"GoodGuyGreg",title : "Reports a bug in your code", body :"Sends you a Pull Request"})

db.posts.insert({username:"ScumbagSteve",title : " Forks your repo on github", body :" Sets to private"})

db.comments.insert({username:"GoodGuyGreg", comment : "Hope you got a good deal!" , post :ObjectId("600311eb3bd8756709b07010")})

db.comments.insert({username:"GoodGuyGreg", comment : "What's mine is yours!" , post :ObjectId("600311fe3bd8756709b07011")})

db.comments.insert({username:"GoodGuyGreg", comment : " Don't violate the licensing agreement!" , post :ObjectId("600312153bd8756709b07012")})

db.comments.insert({username:" ScumbagSteve", comment : "It still isn't clean" , post :ObjectId("600311233bd8756709b0700d")})

db.comments.insert({username:" ScumbagSteve", comment : "Denied your PR cause I found a hack" , post :ObjectId("600311b33bd8756709b0700f")})

Querying related collections

db.users.find()

db.posts.find()

db.posts.find({username:"GoodGuyGreg"})

db.posts.find({username:"ScumbagSteve"})

db.comments.find({username:"GoodGuyGreg"})

db.comments.find({username:"ScumbagSteve"})